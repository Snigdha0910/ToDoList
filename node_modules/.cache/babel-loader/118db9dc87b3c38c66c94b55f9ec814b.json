{"ast":null,"code":"var _jsxFileName = \"/Users/amoghbabbar/dummy/src/Todo/TodoList.js\";\n\n/* import React,{useState} from 'react';\nimport './../list.css';\n\nfunction TodoList(props) {\n    var markDone;\n    const [input,changeInput]=useState();\n    \n    function changeEditMode(i,item){\n        changeInput(item);\n        props.changeEditMode(i);\n    }\n\n    function removeItem(i){\n        props.removeItem(i);\n    }\n\n    function handleChange(e,i){\n        var target= e.target;\n        target.name === 'isComplete'? props.changeDoneStatus(target.checked,i) : changeInput(target.value);\n    }\n\n    function updateIteminState(i){\n        props.updateIteminState(input,i);\n    }\n    var newList = props.list;\n    var status = props.filter;\n    switch (status){\n        case 'false':\n         newList = newList.filter(list => !list.isComplete)\n         break;\n         case 'true':\n         newList = newList.filter(list => list.isComplete)\n         break;\n         default:\n         break;    \n    };\n\n \n  return (\n    <div>\n        <ul className='list-group'>\n          {newList.map((item,index) => {\n              // eslint-disable-next-line\n                    {markDone = item.isComplete ? 'line-through':'none'}\n                    return (\n                        <li className='list-group-item todo-list-item' key={index}> \n                                <div>\n                                {\n                                item.isEditable ?\n                                <div>\n                                    <input \n                                        style={{float:'left'}} \n                                        value={input} \n                                        onChange={(e)=>handleChange(e,index)}>\n                                    </input>\n                                    <button style={{float:'left'}} onClick={()=>changeEditMode(index)}>X</button>\n                                    <button style={{float:'left'}} onClick={()=>updateIteminState(index)}>OK</button>\n                                </div>:\n                                <div>  \n                                    <div className='container'> \n                                    <input id='todo-list' style={{float:'left'}} name=\"isComplete\" type=\"checkbox\" onChange={(e)=> handleChange(e,index)} checked={item.isChecked}></input>\n                                    <label htmlFor='todo-list' style={{float:'left',textDecoration:markDone}} >{item.item}</label>\n                                    <button type='button' className=\"btn btn-danger \" onClick={()=>removeItem(index)}>Delete</button>\n                                    <button style={{marginLeft:'5px'}}type='button' className=\"btn btn-secondary\" onClick={()=>changeEditMode(index,item.item)}>Edit</button>\n                                </div>\n                                </div>\n                                }\n                                </div>\n                        </li>  \n                            )})}  \n        </ul>\n    </div>\n  );\n} \n\nexport default TodoList; */\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Chip from '@material-ui/core/Chip';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport './../list.css';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nfunction TodoList(props) {\n  var markDone;\n  const classes = useStyles();\n  const [input, changeInput] = useState();\n\n  function changeEditMode(i, item) {\n    changeInput(item);\n    props.changeEditMode(i);\n  }\n\n  function removeItem(i) {\n    props.removeItem(i);\n  }\n\n  function handleChange(e, i) {\n    var target = e.target;\n    target.name === 'isComplete' ? props.changeDoneStatus(target.checked, i) : changeInput(target.value);\n  }\n\n  function updateIteminState(i) {\n    props.updateIteminState(input, i);\n  }\n\n  var newList = props.list;\n  var status = props.filter;\n\n  switch (status) {\n    case 'false':\n      newList = newList.filter(list => !list.isComplete);\n      break;\n\n    case 'true':\n      newList = newList.filter(list => list.isComplete);\n      break;\n\n    default:\n      break;\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    dense: true,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, newList.map((item, index) => {\n    // eslint-disable-next-line\n    {\n      markDone = item.isComplete ? 'line-through' : 'none';\n    }\n    return /*#__PURE__*/React.createElement(ListItem, {\n      button: true,\n      className: \"todo-list-item\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 33\n      }\n    }, item.isEditable ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      style: {\n        float: 'left'\n      },\n      value: input,\n      onChange: e => handleChange(e, index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(ListItemSecondaryAction, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      onClick: () => changeEditMode(index),\n      label: \"X\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Chip, {\n      variant: \"outlined\",\n      style: {\n        marginLeft: '5px'\n      },\n      onClick: () => updateIteminState(index),\n      label: \"OK\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 37\n      }\n    }))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        value: item.item,\n        id: \"todo-list\",\n        name: \"isComplete\",\n        onChange: e => handleChange(e, index),\n        checked: item.isChecked,\n        iconStyle: {\n          fill: 'grey'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 41\n        }\n      }),\n      label: item.item,\n      style: {\n        textDecoration: markDone\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(ListItemSecondaryAction, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": \"delete\",\n      onClick: () => removeItem(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(DeleteIcon, {\n      fontSize: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Chip, {\n      label: 'Rename',\n      style: {\n        marginLeft: '5px'\n      },\n      onClick: () => changeEditMode(index, item.item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(Divider, {\n      light: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 33\n      }\n    }));\n  })));\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/amoghbabbar/dummy/src/Todo/TodoList.js"],"names":["React","useState","Button","IconButton","DeleteIcon","makeStyles","List","ListItem","Divider","Chip","ListItemSecondaryAction","FormControlLabel","TextField","Checkbox","useStyles","theme","root","width","backgroundColor","palette","background","paper","TodoList","props","markDone","classes","input","changeInput","changeEditMode","i","item","removeItem","handleChange","e","target","name","changeDoneStatus","checked","value","updateIteminState","newList","list","status","filter","isComplete","map","index","isEditable","float","marginLeft","isChecked","fill","textDecoration"],"mappings":"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","sourcesContent":["/* import React,{useState} from 'react';\nimport './../list.css';\n\nfunction TodoList(props) {\n    var markDone;\n    const [input,changeInput]=useState();\n    \n    function changeEditMode(i,item){\n        changeInput(item);\n        props.changeEditMode(i);\n    }\n\n    function removeItem(i){\n        props.removeItem(i);\n    }\n\n    function handleChange(e,i){\n        var target= e.target;\n        target.name === 'isComplete'? props.changeDoneStatus(target.checked,i) : changeInput(target.value);\n    }\n\n    function updateIteminState(i){\n        props.updateIteminState(input,i);\n    }\n    var newList = props.list;\n    var status = props.filter;\n    switch (status){\n        case 'false':\n         newList = newList.filter(list => !list.isComplete)\n         break;\n         case 'true':\n         newList = newList.filter(list => list.isComplete)\n         break;\n         default:\n         break;    \n    };\n\n \n  return (\n    <div>\n        <ul className='list-group'>\n          {newList.map((item,index) => {\n              // eslint-disable-next-line\n                    {markDone = item.isComplete ? 'line-through':'none'}\n                    return (\n                        <li className='list-group-item todo-list-item' key={index}> \n                                <div>\n                                {\n                                item.isEditable ?\n                                <div>\n                                    <input \n                                        style={{float:'left'}} \n                                        value={input} \n                                        onChange={(e)=>handleChange(e,index)}>\n                                    </input>\n                                    <button style={{float:'left'}} onClick={()=>changeEditMode(index)}>X</button>\n                                    <button style={{float:'left'}} onClick={()=>updateIteminState(index)}>OK</button>\n                                </div>:\n                                <div>  \n                                    <div className='container'> \n                                    <input id='todo-list' style={{float:'left'}} name=\"isComplete\" type=\"checkbox\" onChange={(e)=> handleChange(e,index)} checked={item.isChecked}></input>\n                                    <label htmlFor='todo-list' style={{float:'left',textDecoration:markDone}} >{item.item}</label>\n                                    <button type='button' className=\"btn btn-danger \" onClick={()=>removeItem(index)}>Delete</button>\n                                    <button style={{marginLeft:'5px'}}type='button' className=\"btn btn-secondary\" onClick={()=>changeEditMode(index,item.item)}>Edit</button>\n                                </div>\n                                </div>\n                                }\n                                </div>\n                        </li>  \n                            )})}  \n        </ul>\n    </div>\n  );\n} \n\nexport default TodoList; */\n\n\nimport React,{useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Chip from '@material-ui/core/Chip';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport './../list.css';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n    },\n  }));\n\nfunction TodoList(props) {\n    var markDone;\n    const classes = useStyles();\n    const [input,changeInput]=useState();\n    \n    function changeEditMode(i,item){\n        changeInput(item);\n        props.changeEditMode(i);\n    }\n\n    function removeItem(i){\n        props.removeItem(i);\n    }\n\n    function handleChange(e,i){\n        var target= e.target;\n        target.name === 'isComplete'? props.changeDoneStatus(target.checked,i) : changeInput(target.value);\n    }\n\n    function updateIteminState(i){\n        props.updateIteminState(input,i);\n    }\n    var newList = props.list;\n    var status = props.filter;\n    switch (status){\n        case 'false':\n         newList = newList.filter(list => !list.isComplete)\n         break;\n         case 'true':\n         newList = newList.filter(list => list.isComplete)\n         break;\n         default:\n         break;    \n    };\n\n \n  return (\n    <div>\n        <List dense className={classes.root}>\n          {newList.map((item,index) => {\n              // eslint-disable-next-line\n                    {markDone = item.isComplete ? 'line-through':'none'}\n                    return (\n                        <ListItem button className='todo-list-item' key={index}> \n                                <div>\n                                {\n                                item.isEditable ?\n                                <div>\n                                    <TextField style={{float:'left'}} \n                                        value={input} \n                                        onChange={(e)=>handleChange(e,index)}></TextField> \n                                    <ListItemSecondaryAction>\n                                    <Chip onClick={()=>changeEditMode(index)} label='X'/>\n                                    <Chip variant=\"outlined\"  style={{marginLeft:'5px'}} onClick={()=>updateIteminState(index)} label='OK'/>\n                                    </ListItemSecondaryAction>    \n                                    \n                                </div>:\n                                <div> \n                                    <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                    value={item.item}\n                                    id='todo-list' \n                                    name=\"isComplete\" \n                                    onChange={(e)=> handleChange(e,index)} \n                                    checked={item.isChecked}\n                                    iconStyle={{fill: 'grey'}}/>}\n                                    label={item.item} style={{textDecoration:markDone}}/> \n                                    <ListItemSecondaryAction>\n                                    <IconButton aria-label=\"delete\" onClick={()=>removeItem(index)}>\n                                    <DeleteIcon fontSize=\"medium\" />\n                                    </IconButton>\n                                    <Chip label={'Rename'} style={{marginLeft:'5px'}} onClick={()=>changeEditMode(index,item.item)}/>\n                                    </ListItemSecondaryAction>\n                                   \n                                </div>\n                                }\n                                </div>\n                                <Divider light />\n                        </ListItem>  \n                            )})}  \n        </List>\n    </div>\n  );\n} \n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}